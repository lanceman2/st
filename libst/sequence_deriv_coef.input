-- axiom code

-- run% axiom -noht
-- )read sequence_deriv_coef
-- or
-- % open-axiom --script ./sequence_deriv_coef.input
---------------------------------------------------------------------
---------------------------------------------------------------------
-- This calculates numbers for the code in ../libst/sequence_deriv.c
-- generates C code.
--
-- Computing this by pencil and paper would be very time consuming.
---------------------------------------------------------------------
---------------------------------------------------------------------

)read diff_coef

---------------------------------------------------------------------
---------------------------------------------------------------------
--
--                   CONFIGURATION
--

-- p
derivMin := 0 -- 0th derivative is for smoothing the function
derivMax := 3 -- 3rd derivative

-- n
powerMin := 1 -- x^1 fit
powerMax := 7 -- x^7 fit

-- m
pointsMin := 2 -- number of points to fit
pointsMax := 11 -- number of points to fit

outPath := "sequence__deriv__coef.h"

--
---------------------------------------------------------------------
---------------------------------------------------------------------


file: TextFile := open(outPath, "output")

write!(file, "/* this file was generated by running axiom or open-axiom */" nl)

for p in derivMin..derivMax repeat
  for m in pointsMin..pointsMax repeat
    for n in powerMin..powerMax repeat
      if (diffCoefCheck(n, m, p)) then
        write!(file, diffCoefHeader(n, m, p))
        max := truncate(((m-1)/2)::Float)::Integer
        for i in 0..max repeat
          --write!(file, "diffCoefThetaCoef(-i=" string(-i) ", m=" string(m)_
          --", n=" string(n) ", p=" string(p) ")" nl)
          vec := diffCoefThetaCoef(-i,m,n,p)
          str := "  /********* \chi = [" string(-i) ","_
          string(-i+m-1) "] *****/" nl
          for j in 1..m repeat
            if denom(vec.j) = 1 then
              str := str "  " string(numer(vec.j))
            else
              str := str "  " string(numer(vec.j)) "/" string(denom(vec.j)) ".0"
            if j < m then
              str := str ","
          if i < max then
            str := str ","
          write!(file, str nl)
        write!(file, "};" nl)


write!(file, nl nl "static const StReal__t *__get__coef(" nl _
"    int deriv__num, int poly__order, int points)" nl _
"{" nl);

for p in derivMin..derivMax repeat
  for m in pointsMin..pointsMax repeat
    for n in powerMin..powerMax repeat
      if (diffCoefCheck(n, m, p)) then
        write!(file, "  if(deriv__num == " string(p) " && points == " _
        string(m) " && poly__order == " string(n) ")" nl _
        "    return " diffCoefStructName(n, m, p) ";" nl)

write!(file, " " nl "  return NULL;" nl "}" nl)


close! file
