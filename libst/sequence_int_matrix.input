-- axiom code

-- run% axiom -noht
-- )read sequence_int_matrix
-- or
-- % open-axiom --script ./sequence_int_matrix.input
---------------------------------------------------------------------
---------------------------------------------------------------------
-- This calculates numbers for the code in sequence_int.c
-- generates C code.
--
-- See ../doc/integrating.html for study of what this shit does.
---------------------------------------------------------------------
---------------------------------------------------------------------

)read diff_coef

---------------------------------------------------------------------
---------------------------------------------------------------------
--
--                         CONFIGURATION
--

-- n
powerMin := 1 -- x^Min fit
powerMax := 3 -- x^Max fit

-- m
pointsMin := 2 -- min number of points to fit
pointsMax := 5 -- max number of points to fit

outPath := "sequence__int__matrix.h"

--
---------------------------------------------------------------------
---------------------------------------------------------------------


file: TextFile := open(outPath, "output")

write!(file, "/* this file was generated by running open-axiom" _
" or axiom " nl _
" *" nl _
" * by running:" nl nl _
"           open-axiom --script sequence__int__matrix" nl nl _
" * or something like that." nl _
" */" nl)

intMatrixName : (PositiveInteger, PositiveInteger) -> String
intMatrixName(n, m) ==
  "matrix__" string(m) "pts__xpow" string(n)

intParamCheck: (PositiveInteger, PositiveInteger) -> Boolean
intParamCheck(n, m) ==
  if m < (n + 1) then return false -- Example: cannot fit x^3 with less than 4 points
  return true -- success, we can compute a \theta matrix thingy



for m in pointsMin..pointsMax repeat
  for n in powerMin..powerMax repeat
    if (intParamCheck(n, m)) then
      max := m-2 -- number of matrixes - 1
      write!(file, nl "static const StReal__t "_
      intMatrixName(n, m) "[] =" nl "{" nl _
      "  //////////////////////////////////" _
      "/////////////////////////////" nl _
      "  //      x^" string(n) " fit" nl _
      "  // giving us " string(n+1) _
      " \theta constants per fit function" nl _
      "  //      " string(m) " points " nl _
      "  //      " string(max+1) "   " string(m) _
      " column by " string(n+1) " row matrices" nl _
      "  //" nl _
      "  // (vector \theta) = [Matrix below] " _
      "* [vector F(vector \chi)]" nl _
      "  //" nl _
      "  //////////////////////////////////"_
      "/////////////////////////////" nl)

      for i in 0..max repeat
        mat := diffCoefMatrix(-i,m,n)
        str := "  ////////////////////////////"_
        "////////////////////////" nl _
        "  //   Matrix for vector \chi = " string(-i) ".."_
        string(-i+m-1) nl _
        "  ////////////////////////////"_
        "////////////////////////" nl
        for j in 1..n+1 repeat
          vec := row(mat, j)
          for k in 1..m repeat
            if denom(vec.k) = 1 then
                str := str "  " string(numer(vec.k)) "L"
            else
              str := str "  " string(numer(vec.k))_
              "L/" string(denom(vec.k)) ".0"
            if k < m then
              str := str ","
          if j < n+1 then
            str := str "," nl
        if i < max then
          str := str ","
        write!(file, str nl)
      write!(file, "};" nl)



write!(file, nl nl "static inline const StReal__t *__get__matrix(" _
"int poly__order, int points)" nl _
"{" nl);

for m in pointsMin..pointsMax repeat
  for n in powerMin..powerMax repeat
    if (intParamCheck(n, m)) then
      write!(file, "  if(points == " _
      string(m) " && poly__order == " string(n) ")" nl _
      "    return " intMatrixName(n, m) ";" nl)

write!(file, " " nl "  return NULL;" nl "}" nl)

close! file
